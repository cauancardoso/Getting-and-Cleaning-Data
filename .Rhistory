ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v10)) +
scale_x_discrete(labels = c("Fund. \n Incompleto", "Fund. \n Completo", "Médio \n Incompleto", "Médio \n Completo", "Superior \n Incompleto", "Superior \n Completo", "Não Sabe")) +
xlab("Escolaridade do Pai") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v11)) +
scale_x_discrete(labels = c("Municipal", "Estadual", "Federal")) +
xlab("Tipo de Escola") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v12)) +
scale_x_discrete(labels = c("1º ano", "2º ano", "3º ano", "Concluído")) +
xlab("Série no Ensino Médio") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v14)) +
scale_x_discrete(labels = c("Muito Ruim", "Ruim", "Regular", "Boa", "Muito Boa")) +
xlab("Avaliação da Preparação para o ENEM pela Escola") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v15)) +
scale_x_discrete(labels = c("Sim", "Não")) +
xlab("Tem/Tinha Biblioteca") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v16)) +
scale_x_discrete(labels = c("Sim", "Não")) +
xlab("Tem/Tinha Quadra Poliesportiva") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v17)) +
scale_x_discrete(labels = c("Sim", "Não")) +
xlab("Tem/Tinha Laboratório de Informática") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v18)) +
scale_x_discrete(labels = c("Sim", "Não")) +
xlab("Tem/Tinha Laboratório de Ciências") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v19)) +
scale_x_discrete(labels = c("Sim", "Não")) +
xlab("Ficou sem professor (a)") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v20)) +
scale_x_discrete(labels = c("Sim", "Não", "Não sabe")) +
xlab("Autorização Grêmio Estudantil") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = V21)) +
scale_x_discrete(labels = c("Sim", "Não")) +
xlab("Grêmio Estudantil") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v22)) +
scale_x_discrete(labels = c("Muito Ruim", "Ruim", "Regular", "Boa", "Muito Boa")) +
xlab("Avaliação da Infraestrutura da Escola") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v23)) +
scale_x_discrete(labels = c("Houve menos \n investimento", "Permaneceu \n o mesmo", "Houve mais \n investimento", "Não Sabe")) +
xlab("Sobre o investimento do Governo na Escola") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v24)) +
scale_x_discrete(labels = c("Sim", "Não")) +
xlab("Sobre conteúdo da Escola") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v25)) +
scale_x_discrete(labels = c("Pior", "Igual", "Melhor")) +
xlab("Sobre a Preparação do Pré em relação a Escola") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v26)) +
scale_x_discrete(labels = c("Ensino Infantil", "Ensino Fundamental", "Ensino Médio", "Ensino Superior")) +
xlab("Sobre os investimentos") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v27)) +
scale_x_discrete(labels = c("Muito \n Insatisfatório", "Pouco \n Insatisfatório", "Suficiente", "Maior do que \n o Necessário")) +
xlab("Avaliação do Investimento") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v28)) +
scale_x_discrete(labels = c("Voluntária", "Remunerada", "Não exerce atividade")) +
xlab("Sobre atividade profissional") +
ylab("Frequência")
v28a = na.omit(v28a)
ggplot(data = na.omit(dados)) +
geom_bar(mapping = aes(x = v28a)) +
scale_x_discrete(labels = c("Até 20h", "Entre 20h e 40h")) +
xlab("Carga Horária") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v29)) +
scale_x_discrete(labels = c("Pais/Familiares", "Atividade Remunerada", "Outros: Pensão")) +
xlab("Fonte de Renda") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v30)) +
scale_x_discrete(labels = c("Até 1s.m", "Entre 1 s.m \n e 2 s.m", "Entre 2 s.m \n e 3 s.m", "Entre 3 s.m \n e 4 s.m", "Acima de 5 s.m", "Não sabe")) +
xlab("Renda") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v12)) +
scale_x_discrete(labels = c("1º ano", "2º ano", "3º ano")) +
xlab("Série no Ensino Médio") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v15)) +
scale_x_discrete(labels = c("Sim", "Não")) +
xlab("Tem Biblioteca") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v16)) +
scale_x_discrete(labels = c("Sim", "Não")) +
xlab("Tem Quadra Poliesportiva") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v17)) +
scale_x_discrete(labels = c("Sim", "Não")) +
xlab("Tem Laboratório de Informática") +
ylab("Frequência")
ggplot(data = dados) +
geom_bar(mapping = aes(x = v18)) +
scale_x_discrete(labels = c("Sim", "Não")) +
xlab("Tem Laboratório de Ciências") +
ylab("Frequência")
x = c(1, 1.1, 2, 5, 8, 8.5, 10, 10.1)
hist(x)
density(x,4)
plot(density(x,4))
#Pacote Splancs
data(cardiff)
lambda <- kernel2d(as.points(cardiff), cardiff$poly, 5, nx = 100, ny = 100, kernel = “quartic”)
image(lambda,col = terrain.colors(256), main = expression(tau==5))
pointmap(as.points(cardiff), add = TRUE, cex=0.5)
#Pacotes spatstat e splancs
library(spatstat)
install.packages("rmarkdown")
sample(1:10)
random(1:10)
?sample
sample(1,10)
random(1:10,1)
sample(1:10,1)
sample(1:30,1)
sample(1:30,1)
sample(1:30,1)
sample(1:30,1)
sample(1:30,1)
sample(1:30,1)
set.seed(1)
sample(1)
sample(1)
sample(10)
sample(10)
set.seed(10)
sample(1)
set.seed(10)
sample(10)
sample(10)
sample(10)
?set.seed
?grep
install.packages("geoR")
install.packages("RandomFields")
require("geoR")
require("RandomFields")
x=seq(0,100,1)
S=GaussRF(cbind(x,x),model="exponential",grid=T, param=c(mean=12,variance=2,nugget=0.5,scale=20))
filled.contour(x,x,S,color=terrain.colors,plot.axes={axis(1); axis(2)})
S=GaussRF(cbind(x,x),model="exponential",grid=T, param=c(mean=12,variance=2,nugget=0.5,scale=50))
filled.contour(x,x,S,color=terrain.colors,plot.axes={axis(1); axis(2)})
filled.contour(x,x,S,color=terrain.colors,plot.axes={axis(1); axis(2)})
S=GaussRF(cbind(x,x),model="exponential",grid=T, param=c(mean=12,variance=2,nugget=0.5,scale=50))
filled.contour(x,x,S,color=terrain.colors,plot.axes={axis(1); axis(2)})
S=GaussRF(cbind(x,x),model="exponential",grid=T, param=c(mean=12,variance=2,nugget=0.5,scale=100))
filled.contour(x,x,S,color=terrain.colors,plot.axes={axis(1); axis(2)})
# phi = 50
S=GaussRF(cbind(x,x),model="exponential",grid=T, param=c(mean=12,variance=2,nugget=0.5,scale=50))
filled.contour(x,x,S,color=terrain.colors,plot.axes={axis(1); axis(2)})
# phi = 100
S=GaussRF(cbind(x,x),model="exponential",grid=T, param=c(mean=12,variance=2,nugget=0.5,scale=100))
filled.contour(x,x,S,color=terrain.colors,plot.axes={axis(1); axis(2)})
# phi = 100, pepita próxima de zero
S=GaussRF(cbind(x,x),model="exponential",grid=T, param=c(mean=12,variance=2,nugget=0.005,scale=20))
filled.contour(x,x,S,color=terrain.colors,plot.axes={axis(1); axis(2)})
# phi = 100, pepita próxima de zero
S=GaussRF(cbind(x,x),model="exponential",grid=T, param=c(mean=12,variance=2,nugget=0.005,scale=100))
filled.contour(x,x,S,color=terrain.colors,plot.axes={axis(1); axis(2)})
S=GaussRF(cbind(x,x),model="exponential",grid=T, param=c(mean=12,variance=2,nugget=0.005,scale=50))
filled.contour(x,x,S,color=terrain.colors,plot.axes={axis(1); axis(2)})
# phi = 50, pepita próxima de zero
S=GaussRF(cbind(x,x),model="exponential",grid=T, param=c(mean=12,variance=2,nugget=0.005,scale=50))
filled.contour(x,x,S,color=terrain.colors,plot.axes={axis(1); axis(2)})
S=GaussRF(cbind(x,x),model="exponential",grid=T, param=c(mean=12,variance=16,nugget=0.005,scale=50))
filled.contour(x,x,S,color=terrain.colors,plot.axes={axis(1); axis(2)})
# phi = 50, pepita próxima de zero
S=GaussRF(cbind(x,x),model="exponential",grid=T, param=c(mean=12,variance=2,nugget=0.005,scale=50))
filled.contour(x,x,S,color=terrain.colors,plot.axes={axis(1); axis(2)})
# phi = 50, variância = 12 e pepita próxima de zero
S=GaussRF(cbind(x,x),model="exponential",grid=T, param=c(mean=12,variance=16,nugget=0.005,scale=50))
filled.contour(x,x,S,color=terrain.colors,plot.axes={axis(1); axis(2)})
# phi = 50, variância = 16 e pepita = 16
S=GaussRF(cbind(x,x),model="exponential",grid=T, param=c(mean=12,variance=16,nugget=16,scale=50))
filled.contour(x,x,S,color=terrain.colors,plot.axes={axis(1); axis(2)})
modelo=RPgauss(RMtrend(12)+RMexp(var=2,scale=20)+
RMnugget(var=0.5))
S=RFsimulate(modelo, x=x, y=x, grid=T)
plot(S,col=terrain.colors(256))
sim <-  grf(80, grid="irreg", cov.model="spherical",mean=12, cov.pars = c(2, 20), nugget=0.5)
points(sim)
points(sim, cex.min=1, cex.max=5, pt.sizes="quartiles")
points(sim, cex.min=1, cex.max=5, pt.sizes="quintiles", col=gray(seq(1,0,l=5)))
points(sim, cex.min=1, cex.max=5, pt.sizes="quintiles", col=heat.colors(5))
?RPgauss
?geoR
sim <-  grf(80, grid="irreg", cov.model="spherical",mean=12, cov.pars = c(2, 20), nugget=0.5, xlims=c(0,100),ylims=c(0,100))
points(sim)
points(sim, cex.min=1, cex.max=5, pt.sizes="quartiles")
points(sim, cex.min=1, cex.max=5, pt.sizes="quintiles", col=heat.colors(5))
points(sim, cex.min=1, cex.max=5, pt.sizes="quintiles", col=gray(seq(1,0,l=5)))
#Formato padrão dos dados
dados<-cbind(sim$coords,sim$data)
dados<-as.geodata(dados)
#Análise exploratória
points(dados, cex.min=1, cex.max=5, pt.sizes="quintiles", col=heat.colors(5))
plot(dados)
#Pacote geoR
sim <-  grf(80, grid="irreg", cov.model="spherical",mean=20, cov.pars=c(16, 0.25),nugget=2,xlims=c(0,1),ylims=c(0,1))
plot(sim)
sim <-  grf(300, grid="irreg", cov.model="spherical",mean=12, cov.pars = c(2, 20), nugget=0.5, xlims=c(0,100),ylims=c(0,100))
points(sim) # pontos sem diferenciação
points(sim, cex.min=1, cex.max=5, pt.sizes="quartiles") # pontos com diferenciações por tamanho de acordo com os quartis
points(sim, cex.min=1, cex.max=5, pt.sizes="quintiles", col=heat.colors(5)) # pontos com diferenciações por tamanho e cor de acordo com os quintis
plot(sim)
# phi = 300
sim <-  grf(300, grid="irreg", cov.model="gaussian",mean=12, cov.pars = c(2, 20), nugget=0.5, xlims=c(0,100),ylims=c(0,100))
plot(sim)
?"::"
source("metodos.r")
# packages and functions
library(dplyr)
library(data.table)
library(knitcitations)
install.packages(knitcitations)
install.packages("knitcitations")
library(knitcitations)
library(readxl)
library(bit64)
install.packages("bit64")
library(bit64)
library(lubridate)
library(XML)
install.packages("XML")
library(XML)
library(rgdal)
library(leaflet)
library(htmlwidgets)
library(webshot)
library(haven)
sim <- grf(80, grid="irreg", cov.model="spherical",mean=20,
cov.pars=c(16, 0.25),nugget=2,xlims=c(0,1),ylims=c(0,1))
require(geoR)
sim <- grf(80, grid="irreg", cov.model="spherical",mean=20,
cov.pars=c(16, 0.25),nugget=2,xlims=c(0,1),ylims=c(0,1))
dados<-cbind(sim$coords,sim$data)
dados<-as.geodata(dados)
points(dados, cex.min=1, cex.max=5, pt.sizes="quintiles",
col=heat.colors(5))
plot(dados)
summary(lm(dados$data~dados$coords))
variog.nuvem <- variog(dados, option="cloud", max.dist=1.5)
plot(variog.nuvem)
plot(variograma10, bin.cloud=T) # exemplo com boxplot. Observe que os valores extremos são típicos
variograma10 <- variog(dados, uvec=seq(0,1.5,l=10), # divisão de um intervalo de 0 a 1.5 em 10 partes
bin.cloud=T)
plot(variograma10, bin.cloud=T) # exemplo com boxplot. Observe que os valores extremos são típicos
vero = c(dpois(7,4), dposi(7,6), dpois(7,8), dpois(7,10))
vero = c(dpois(7,4), dpois(7,6), dpois(7,8), dpois(7,10))
vero
1.4^2
1.6^2
1.8^2
ex.6.4 = matrix(c(
5.94, 52, 20.7,
4.71, 46, 21.3,
5.86, 51, 25.4,
6.52, 44, 22.7,
6.80, 70, 23.9,
5.23, 33, 24.3,
4.97, 21, 22.2,
8.78, 63, 26.2,
5.13, 56, 23.3,
6.74, 54, 29.2,
5.95, 44, 22.7,
5.83, 71, 21.9,
5.74, 39, 22.4,
4.92, 58, 20.2,
6.69, 58, 24.4,
6.48, 65, 26.3,
8.83, 76, 22.7,
5.10, 47, 21.5,
5.81, 43, 20.7,
4.65, 30, 18.9,
6.82, 58, 23.9,
6.28, 78, 24.3,
5.15, 49, 23.8,
2.92, 36, 19.6,
9.27, 67, 24.3,
5.57, 42, 22.0,
4.92, 29, 22.5,
6.72, 33, 24.1,
5.57, 42, 22.7,
6.25, 66, 27.3), nrow = 30, ncol = 3, byrow = T)
ex.6.4
y = ex.6.4[,1]
y
x1 = ex.6.4[,2]
x2 = ex.6.4[,3]
?lm
mod1 = lm(y~x1+x2)
mod1
?anova
anova(mod1)
mod2 = lm(y~x1)
anova(mod2, mod1)
dados = data.frame("Gastos" = c(88,37,60,79,71,39,103,53,90,79,39,97,45,35,86,89,37,48,80,63), "Renda" = c(25,17,37,27,15,13,38,32,22,16,20,35,16,21,35,22,14,30,26,35), "Crianca" = as.factor(c(1,0,0,1,1,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0), "Area" = c(2,1,1,2,3,1,1,2,1,1,2,2,1,3,3,1,1,2,3,1))
)
dados = data.frame("Gastos" = c(88,37,60,79,71,39,103,53,90,79,39,97,45,35,86,89,37,48,80,63), "Renda" = c(25,17,37,27,15,13,38,32,22,16,20,35,16,21,35,22,14,30,26,35), "Crianca" = as.factor(c(1,0,0,1,1,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0)), "Area" = as.factor(c(2,1,1,2,3,1,1,2,1,1,2,2,1,3,3,1,1,2,3,1)))
dados
?glm
mod1 = dados %>% glm("Gastos"~ "Crianca" + "Area", family = gaussian)
require(dplyr)
mod1 = dados %>% glm("Gastos"~ "Crianca" + "Area", family = gaussian)
mod1 = as.vector() %>% dados %>% glm("Gastos"~ "Crianca" + "Area", family = gaussian)
mod1 = glm(dados[["Gastos"]]~ dados[["Crianca"]] + dados[["Area"]], family = gaussian)
mod1
dados = data.frame("Gastos" = c(88,37,60,79,71,39,103,53,90,79,39,97,45,35,86,89,37,48,80,63), "Renda" = c(25,17,37,27,15,13,38,32,22,16,20,35,16,21,35,22,14,30,26,35), "Crianca" = as.factor(c(1,0,0,1,1,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0)), "Area" = as.factor(c(2,1,1,2,3,1,1,2,1,1,2,2,1,3,3,1,1,2,3,1)))
mod1 = lm(dados[["Gastos"]]~ dados[["Crianca"]] + dados[["Area"]])
mod1
ex6.4 = data.frame("CHOL" = c(5.94,
4.71,
5.86,
6.52,
6.8,
5.23,
4.97,
8.78,
5.13,
6.74,
5.95,
5.83,
5.74,
4.92,
6.69,
6.48,
8.83,
5.1,
5.81,
4.65,
6.82,
6.28,
5.15,
2.92,
9.27,
5.57,
4.92,
6.72,
5.57,
6.25), "Age" = c(52,
46,
51,
44,
70,
33,
21,
63,
56,
54,
44,
71,
39,
58,
58,
65,
76,
47,
43,
30,
58,
78,
49,
36,
67,
42,
29,
33,
42,
66), "BMI" = c(20.7,
21.3,
25.4,
22.7,
23.9,
24.3,
22.2,
26.2,
23.3,
29.2,
22.7,
21.9,
22.4,
20.2,
24.4,
26.3,
22.7,
21.5,
20.7,
18.9,
23.9,
24.3,
23.8,
19.6,
24.3,
22,
22.5,
24.1,
22.7,
27.3))
ex6.4
mod1 = lm(ex6.4$CHOL~ex6.4$Age)
mod2 = lm(ex6.4$CHOL~ex6.4$Age+ex6.4$BMI)
mod1
mod2
?anova
anova(mod1)
anova(mod2)
anova(mod2, mod1)
args("rnorm")
search()
library(dplyr)
search()
swirl()
library(swirl)
rm(list=ls())
ls()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vector <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
clas(shape_mat)
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
q()
?download.file
getwd()
setwd(paste0(getwd(),"/Data Science/Coursera"))
getwd()
questao1 <- read.csv(getdata_data_ss06hid.csv, header = TRUE)
ls()
list.files()
list.files[6]
list.files()[6]
list.files()[5]
questao1 <- read.csv("getdata_data_ss06hid.csv", header = TRUE)
head(questao1)
table(questao1$VAL)
sum(table(questao1$VAL > 10)
)
sum(table(questao1$VAL > 13))
table(questao1$VAL > 13)
q()
